# Production QNet Blockchain Node - Optimized Build
FROM rust:1.86-slim as builder

WORKDIR /build

# Install system dependencies for production build
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    pkg-config \
    libssl-dev \
    libclang-dev \
    git \
    && rm -rf /var/lib/apt/lists/*

# Optimized build environment for faster compilation
ENV CARGO_BUILD_JOBS=8
ENV CARGO_PROFILE_RELEASE_LTO=thin
ENV CARGO_PROFILE_RELEASE_PANIC=abort
ENV CARGO_PROFILE_RELEASE_CODEGEN_UNITS=1

# Production port configuration
ENV QNET_P2P_PORT=9876
ENV QNET_RPC_PORT=9877  
ENV QNET_METRICS_PORT=9878
ENV DOCKER_ENV=1

# Copy dependency manifests first for better caching
COPY Cargo.toml ./
COPY core/qnet-consensus/Cargo.toml ./core/qnet-consensus/
COPY core/qnet-core/Cargo.toml ./core/qnet-core/
COPY core/qnet-mempool/Cargo.toml ./core/qnet-mempool/
COPY core/qnet-state/Cargo.toml ./core/qnet-state/
COPY core/qnet-sharding/Cargo.toml ./core/qnet-sharding/
COPY infrastructure/qnet-api/Cargo.toml ./infrastructure/qnet-api/
COPY development/qnet-integration/Cargo.toml ./development/qnet-integration/

# Create dummy source files to cache dependencies
RUN mkdir -p core/qnet-consensus/src core/qnet-core/src core/qnet-mempool/src \
    core/qnet-state/src core/qnet-sharding/src infrastructure/qnet-api/src \
    development/qnet-integration/src/bin development/qnet-integration/src \
    core/qnet-consensus/benches core/qnet-mempool/benches \
    core/qnet-state/benches core/qnet-sharding/benches && \
    echo "pub fn dummy() {}" > core/qnet-consensus/src/lib.rs && \
    echo "pub fn dummy() {}" > core/qnet-core/src/lib.rs && \
    echo "pub fn dummy() {}" > core/qnet-mempool/src/lib.rs && \
    echo "pub fn dummy() {}" > core/qnet-state/src/lib.rs && \
    echo "pub fn dummy() {}" > core/qnet-sharding/src/lib.rs && \
    echo "pub fn dummy() {}" > infrastructure/qnet-api/src/lib.rs && \
    echo "pub fn dummy() {}" > development/qnet-integration/src/lib.rs && \
    echo "fn main() {}" > development/qnet-integration/src/bin/qnet-node.rs && \
    echo "fn main() {}" > core/qnet-consensus/benches/consensus_bench.rs && \
    echo "fn main() {}" > core/qnet-mempool/benches/mempool_bench.rs && \
    echo "fn main() {}" > core/qnet-state/benches/state_bench.rs && \
    echo "fn main() {}" > core/qnet-sharding/benches/sharding_bench.rs

# Build dependencies only (this layer gets cached!)
RUN cargo build --release --bin qnet-node --manifest-path development/qnet-integration/Cargo.toml

# Copy real source code
COPY . .

# Build final optimized binary
RUN cargo build --release --bin qnet-node --manifest-path development/qnet-integration/Cargo.toml

# Final production runtime image
FROM ubuntu:22.04

# Install production runtime dependencies
RUN apt-get update && apt-get install -y \
    libssl3 \
    curl \
    ca-certificates \
    netcat-openbsd \
    htop \
    && rm -rf /var/lib/apt/lists/*

# Copy production binary FIRST (as root)
COPY --from=builder /build/target/release/qnet-node /usr/local/bin/qnet-node

# Set production permissions (as root)
RUN chmod +x /usr/local/bin/qnet-node

# Verify binary was copied successfully
RUN ls -la /usr/local/bin/qnet-node

# Create directories for production
RUN mkdir -p /app/{data,logs,config,node_data}
RUN chmod -R 755 /app

# Stay as root for now - for debugging
WORKDIR /app

# Production port exposure - QNet standard ports
EXPOSE 9876 9877 9878

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:${QNET_RPC_PORT}/health || exit 1

# Production entrypoint - Docker auto mode
ENTRYPOINT ["qnet-node", "--auto-mode"]
CMD [] 