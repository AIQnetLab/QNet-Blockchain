# Multi-stage build with cargo-chef for optimal dependency caching
FROM rust:1.83-slim as chef
RUN cargo install cargo-chef
WORKDIR /build

FROM chef as planner
COPY . .
RUN cargo chef prepare --recipe-path recipe.json

FROM chef as builder
# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    pkg-config \
    libssl-dev \
    libclang-dev \
    git \
    && rm -rf /var/lib/apt/lists/*

# Copy recipe and build dependencies
COPY --from=planner /build/recipe.json recipe.json

# Ultra-aggressive optimization settings for maximum build speed
ENV CARGO_BUILD_JOBS=6
ENV CARGO_NET_GIT_FETCH_WITH_CLI=true
ENV RUSTFLAGS="-C target-cpu=native -C opt-level=1 -C debug-assertions=off -C overflow-checks=off -C codegen-units=1 -C incremental=false"
ENV CARGO_PROFILE_RELEASE_LTO=thin
ENV CARGO_PROFILE_RELEASE_PANIC=abort
ENV CARGO_PROFILE_RELEASE_STRIP=symbols
ENV CARGO_PROFILE_RELEASE_DEBUG=false

# Build dependencies - this layer will be cached aggressively
RUN cargo chef cook --release --recipe-path recipe.json

# Copy source and build application with maximum speed settings
COPY . .
RUN cargo build --release --bin qnet-node \
    --jobs 6 \
    --offline \
    --locked

# Final runtime image
FROM ubuntu:22.04

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    libssl3 \
    curl \
    ca-certificates \
    netcat-openbsd \
    && rm -rf /var/lib/apt/lists/*

# Create qnet user and directories
RUN groupadd -r qnet && useradd -r -g qnet qnet
RUN mkdir -p /app/{data,logs} && chown -R qnet:qnet /app

# Copy binary from builder
COPY --from=builder /build/target/release/qnet-node /usr/local/bin/qnet-node

# Set permissions
RUN chmod +x /usr/local/bin/qnet-node

# Switch to qnet user
USER qnet
WORKDIR /app

# Expose ports
EXPOSE 8545 8546 8547 9876 9877 9878 9945 9946 9947

# Default command
CMD ["qnet-node"] 