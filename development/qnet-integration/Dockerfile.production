# PRODUCTION QNet Node Dockerfile - Latest Rust and dependencies
FROM rust:1.86-slim AS builder

LABEL maintainer="QNet Development Team"
LABEL description="Production QNet Blockchain Node"
LABEL version="2.0.0"

# Install minimal system dependencies  
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    libclang-dev \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /build

# Copy workspace from project root (context should be QNet-Project root)
COPY . .

# Build the specific binary with maximum optimization for production
ENV RUSTFLAGS="-C target-cpu=native"
ENV CARGO_NET_GIT_FETCH_WITH_CLI=true
ENV CARGO_HTTP_MULTIPLEXING=false
ENV CARGO_NET_RETRY=10
ENV CARGO_HTTP_TIMEOUT=300

# Build from workspace root with correct binary path
RUN cargo build --profile release-fast --bin qnet-node \
    && strip target/release-fast/qnet-node \
    && cp target/release-fast/qnet-node /usr/local/bin/

# Production runtime image
FROM debian:bookworm-slim

# Install minimal runtime dependencies including gosu for user switching
RUN apt-get update && apt-get install -y \
    libssl3 \
    ca-certificates \
    curl \
    gosu \
    && rm -rf /var/lib/apt/lists/* \
    && groupadd -r qnet \
    && useradd -r -g qnet -s /bin/false qnet

# Copy binary from builder
COPY --from=builder /usr/local/bin/qnet-node /usr/local/bin/

# Create necessary directories with proper permissions
RUN mkdir -p /app/data /app/logs \
    && chown -R qnet:qnet /app \
    && chmod 755 /app/data /app/logs

# Create entrypoint script that fixes permissions, cleans corrupted DB, and switches user
RUN echo '#!/bin/bash\n\
set -e\n\
DATA_DIR="${QNET_DATA_DIR:-/app/data}"\n\
if [ "$(id -u)" = "0" ]; then\n\
  echo "Checking data directory: $DATA_DIR"\n\
  \n\
  # Check for corrupted RocksDB (missing MANIFEST files)\n\
  if [ -d "$DATA_DIR" ] && [ "$(ls -A $DATA_DIR 2>/dev/null)" ]; then\n\
    if ls "$DATA_DIR"/MANIFEST-* >/dev/null 2>&1; then\n\
      MANIFEST_FILE=$(ls "$DATA_DIR"/MANIFEST-* | head -1)\n\
      if [ ! -f "$MANIFEST_FILE" ]; then\n\
        echo "⚠️  Corrupted RocksDB detected: Missing MANIFEST file"\n\
        echo "🧹 Cleaning corrupted database for fresh start..."\n\
        rm -rf "$DATA_DIR"/*\n\
        echo "✅ Database cleaned successfully"\n\
      else\n\
        echo "✅ RocksDB appears healthy"\n\
      fi\n\
    else\n\
      echo "🆕 No existing database - starting fresh"\n\
    fi\n\
  else\n\
    echo "🆕 Creating new data directory"\n\
    mkdir -p "$DATA_DIR"\n\
  fi\n\
  \n\
  echo "Fixing data directory permissions..."\n\
  chown -R qnet:qnet "$DATA_DIR"\n\
  chmod -R 755 "$DATA_DIR"\n\
  echo "Starting QNet node as qnet user..."\n\
  exec gosu qnet /usr/local/bin/qnet-node "$@"\n\
else\n\
  exec /usr/local/bin/qnet-node "$@"\n\
fi' > /usr/local/bin/entrypoint.sh \
    && chmod +x /usr/local/bin/entrypoint.sh

# Keep as root to allow permission fixes
USER root

# Set environment variables for production
ENV RUST_LOG=info
ENV RUST_BACKTRACE=1
ENV QNET_DATA_DIR=/app/data
ENV QNET_LOG_DIR=/app/logs

# Health check for production monitoring
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:9877/health || exit 1

# Expose required ports (QNet specific)
EXPOSE 9876 9877 8001

# Production startup command with automatic permission fixing
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
CMD [] 